openapi: 3.0.0
info:
  title: E-commerce Shop API
  version: 1.0.0
  description: |-
    This is API documentation for E-commerce Shop. It is individual project for learning about Service Side with NodeJS, ExpressJS, MongoDB.

    Author: Hoàng Gia Trọng

    The source code is available at [Github-Ecommerce_Backend_Typescript](https://github.com/tronghghe172557/Ecommerce_Backend_Typescript)
  contact:
    name: Hoàng Gia Trọng
    email: hoanggiatrang01@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3052/
tags:
  - name: auth
    description: Authentication & Authorization
  - name: Product
    description: Production
paths:
  # AUTHENTICATION
  /v1/api/auth/login:
    post:
      summary: Login to the system
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        "201":
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/LoginSuccessDto"
        "400":
          description: Username or password is missing/invalid
        "401":
          description: Username or password is incorrect
  /v1/api/auth/signUp:
    post:
      summary: Sign up for a new account
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequestDto"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/SignupSuccessDto"
        "400":
          description: Invalid input data
  /v1/api/auth/logout:
    get:
      summary: Logout from the system
      tags:
        - auth
      security:
        - JWT: []
      responses:
        "200":
          description: Logout successfully
        "401":
          description: Unauthorized
  /v1/api/auth/handle-refreshToken:
    post:
      summary: Handle refresh token
      tags:
        - auth
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RefreshRequestDto"
      responses:
        "200":
          description: Refresh token handled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshSuccessDto"
        "400":
          description: Invalid refresh token
        "401":
          description: Unauthorized

  # PRODUCT
  /v1/api/products:
    get:
      summary: Get all products
      description: Get all published products
      tags:
        - Product
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/sorting"
        - name: deleted
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Whether to include deleted products
      responses:
        "200":
          description: Successfully retrieved products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductDto"
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                            example: 1
                          pageSize:
                            type: integer
                            example: 10
                          total:
                            type: integer
                            example: 42
                          totalPage:
                            type: integer
                            example: 5
                          hasPreviousPage:
                            type: boolean
                            example: false
                          hasNextPage:
                            type: boolean
                            example: true
                      sorting:
                        type: array
                        items:
                          type: object
                          properties:
                            field:
                              type: string
                              example: "createdAt"
                            direction:
                              type: string
                              example: "desc"
  /v1/api/products/{productId}:
    get:
      summary: Get product by ID
      description: Get a specific product by its ID
      tags:
        - Product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
          description: The ID of the product to retrieve
      responses:
        "200":
          description: Successfully retrieved product
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProductDto"
        "404":
          description: Product not found
    post:
      summary: Create a new product
      description: Create a new product in the system
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductDto"
            examples:
              clothing:
                summary: Create a clothing product
                value:
                  product_name: "Summer T-Shirt"
                  product_thumbnail: "https://example.com/images/tshirt.jpg"
                  product_description: "Comfortable cotton t-shirt for summer"
                  product_price: 199000
                  product_quantity: 100
                  product_type: "Clothing"
                  product_shop: "984c06d4-e035-4308-9014-2eabaa78faf0"
                  product_attribute:
                    brand: "Fashion Brand"
                    size: "M"
                    material: "Cotton"
                  product_ratingAverage: 0
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ProductDto"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
    put:
      summary: Update an existing product
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - name: productId
          in: path
          required: true
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
          schema:
            type: string
          description: The ID of the product to update
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductDto"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UpdateProductDto"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "404":
          description: Product not found
    delete:
      summary: Delete a product
      description: Mark a product as deleted (soft delete)
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
          description: The ID of the product to delete
        - $ref: "#/components/parameters/ClientIdHeader"
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Delete product successfully"
                  data:
                    $ref: "#/components/schemas/DeleteProductDto"
        "400":
          description: Bad Request
        "404":
          description: Product not found
  /v1/api/products/unpublish-product:
    get:
      summary: Get all unpublished products by shop
      description: Get all unpublished (draft) products for the authenticated shop
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/sorting"
        - $ref: "#/components/parameters/ClientIdHeader"
      responses:
        "200":
          description: Successfully retrieved unpublished products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ProductDto"
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                          pageSize:
                            type: integer
                          total:
                            type: integer
                          totalPage:
                            type: integer
                          hasPreviousPage:
                            type: boolean
                          hasNextPage:
                            type: boolean
                      sorting:
                        type: array
                        items:
                          type: object
                          properties:
                            field:
                              type: string
                            direction:
                              type: string
        "401":
          description: Unauthorized
  /v1/api/products/deleted:
    get:
      summary: Get all deleted products
      description: Get all products that have been deleted (soft deleted)
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/sorting"
        - $ref: "#/components/parameters/ClientIdHeader"
      responses:
        "200":
          description: Successfully retrieved deleted products
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/DeleteProductDto"
                  meta:
                    type: object
                    properties:
                      pagination:
                        type: object
                        properties:
                          page:
                            type: integer
                          pageSize:
                            type: integer
                          total:
                            type: integer
                          totalPage:
                            type: integer
                          hasPreviousPage:
                            type: boolean
                          hasNextPage:
                            type: boolean
                      sorting:
                        type: array
                        items:
                          type: object
                          properties:
                            field:
                              type: string
                            direction:
                              type: string
        "401":
          description: Unauthorized
  /v1/api/products/{productId}/publish-product:
    post:
      summary: Publish a product
      description: Changes the product status to published
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - name: productId
          in: path
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PubProductDto"
      responses:
        "200":
          description: Product published successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Publish product successfully"
                  data:
                    $ref: "#/components/schemas/ProductDto"
        "400":
          description: Bad Request
        "404":
          description: Product not found
  /v1/api/products/{productId}/unpublish-product:
    post:
      summary: Unpublish a product
      description: Changes the product status to unpublished
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - name: productId
          in: path
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnPubProductDto"
      responses:
        "200":
          description: Product unpublished successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unpublish product successfully"
                  data:
                    $ref: "#/components/schemas/ProductDto"
        "400":
          description: Bad Request
        "404":
          description: Product not found
  /v1/api/products/restore-product/{productId}:
    post:
      summary: Restore a deleted product
      description: Restore a previously deleted product
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
          description: The ID of the product to restore
        - $ref: "#/components/parameters/ClientIdHeader"
      responses:
        "200":
          description: Product restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restore product successfully"
                  data:
                    $ref: "#/components/schemas/ProductDto"
        "400":
          description: Bad Request
        "404":
          description: Product not found

  # DISCOUNT
  /v1/api/discounts/:
    get:
      summary: Get all discount codes for a shop
      description: Retrieve all active discount codes owned by a specific shop
      tags:
        - Discount
      parameters:
        - name: discount_shopId
          in: query
          required: true
          schema:
            type: string
          example: "984c06d4-e035-4308-9014-2eabaa78faf0"
          description: The ID of the shop to retrieve discount codes for
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        "200":
          description: Successfully retrieved discount codes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get all codes by shop successfully"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/DiscountDto"
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                                example: 1
                              pageSize:
                                type: integer
                                example: 10
                              total:
                                type: integer
                                example: 5
                              totalPage:
                                type: integer
                                example: 1
                              hasPreviousPage:
                                type: boolean
                                example: false
                              hasNextPage:
                                type: boolean
                                example: false
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  errorName:
                    type: string
                    example: "Bad Request"
                  message:
                    type: array
                    items:
                      type: string
                    example: ["Shop ID is required"]
        "401":
          description: Unauthorized
    post:
      summary: Generate a discount code
      description: Create a new discount code for a shop
      tags:
        - Discount
      # security:
      #   - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDiscountDto"
            examples:
              percentage:
                summary: Create a percentage discount for all products
                value:
                  discount_name: "Summer Sale"
                  discount_description: "20% off for all products in summer"
                  discount_type: "PERCENTAGE"
                  discount_value: 20
                  discount_code: "SUMMER20"
                  discount_start_date: "2025-06-01T00:00:00Z"
                  discount_end_date: "2025-08-31T23:59:59Z"
                  discount_max_uses: 1000
                  discount_max_user_per_user: 1
                  discount_min_order_value: 100000
                  discount_shopId: "984c06d4-e035-4308-9014-2eabaa78faf0"
                  discount_is_active: true
                  discount_applies_to: "ALL"
              specific:
                summary: Create a fixed amount discount for specific products
                value:
                  discount_name: "Special Offer"
                  discount_description: "50,000 VND off for selected items"
                  discount_type: "FIX_AMOUNT"
                  discount_value: 50000
                  discount_code: "SPECIAL50K"
                  discount_start_date: "2025-04-01T00:00:00Z"
                  discount_end_date: "2025-04-30T23:59:59Z"
                  discount_max_uses: 500
                  discount_max_user_per_user: 2
                  discount_min_order_value: 200000
                  discount_shopId: "984c06d4-e035-4308-9014-2eabaa78faf0"
                  discount_is_active: true
                  discount_applies_to: "SPECIFIC"
                  discount_products_ids:
                    [
                      {
                        "product_id": "85873208-f3a3-44f3-a2a9-44d676b8cbac",
                        "product_name": "update-product",
                        "product_price": 1,
                        "product_quantity": 10,
                      },
                      {
                        "product_id": "2b11ea50-7f33-41bd-8cc8-336e10e6fdae",
                        "product_name": "Áo hoddy",
                        "product_price": 1,
                        "product_quantity": 10,
                      },
                    ]
      responses:
        "201":
          description: Discount code created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Create discount code successfully"
                  data:
                    $ref: "#/components/schemas/DiscountDto"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized\
  /v1/api/discounts/products/discounts:
    get:
      summary: Get all products with discount code
      description: Get all products that can be applied with a specific discount code
      tags:
        - Discount
      parameters:
        - name: discount_code
          in: query
          required: true
          schema:
            type: string
          example: "SUMMER2025"
          description: The discount code to retrieve products for
        - name: discount_shopId
          in: query
          required: true
          schema:
            type: string
          example: "984c06d4-e035-4308-9014-2eabaa78faf0"
          description: The ID of the shop that owns the discount code
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - name: sorting
          in: query
          required: false
          explode: true
          description: Sorting options for the products
          schema:
            type: array
            items:
              type: object
              properties:
                field:
                  type: string
                  enum:
                    [
                      "product_name",
                      "product_price",
                      "product_quantity",
                      "createTimestamp",
                    ]
                  example: "product_price"
                direction:
                  type: string
                  enum: ["asc", "desc"]
                  example: "asc"
          example: [{ "field": "product_price", "direction": "asc" }]
        - name: productId
          in: query
          required: false
          schema:
            type: string
          example: "8943b5c7-35e2-4e5f-9654-1abcd54f7890"
          description: Optional filter by specific product ID
        - name: isActive
          in: query
          required: false
          schema:
            type: boolean
          example: true
          description: Filter by discount active status
      responses:
        "200":
          description: Successfully retrieved products with discount
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get all products by discount codes successfully"
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ProductDto"
                      meta:
                        type: object
                        properties:
                          pagination:
                            type: object
                            properties:
                              page:
                                type: integer
                                example: 1
                              pageSize:
                                type: integer
                                example: 10
                              total:
                                type: integer
                                example: 25
                              totalPage:
                                type: integer
                                example: 3
                              hasPreviousPage:
                                type: boolean
                                example: false
                              hasNextPage:
                                type: boolean
                                example: true
                          sorting:
                            type: array
                            items:
                              type: object
                              properties:
                                field:
                                  type: string
                                  example: "product_price"
                                direction:
                                  type: string
                                  example: "asc"
        "400":
          description: Invalid input or discount code not found/inactive
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  errorName:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Discount code not found or inactive"
        "401":
          description: Unauthorized
  /v1/api/discounts/discounts-amount:
    post:
      summary: Calculate discount amount for products
      description: Calculate the discount amount and final price after applying a specific discount code to a collection of products
      tags:
        - Discount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - discount_code
                - discount_shopId
                - userId
              properties:
                discount_code:
                  type: string
                  example: "SUMMER2025"
                  description: The discount code to apply
                discount_shopId:
                  type: string
                  example: "984c06d4-e035-4308-9014-2eabaa78faf0"
                  description: The ID of the shop that owns the discount code
                userId:
                  type: string
                  example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
                  description: The ID of the user requesting the discount calculation
                products:
                  type: array
                  description: The products to apply the discount to
                  items:
                    $ref: "#/components/schemas/DiscountProductDto"
                  default: []
                  example: [
                    {
                      "product_id": "85873208-f3a3-44f3-a2a9-44d676b8cbac",
                      "product_price": 199000,
                      "product_quantity": 2,
                      "product_name": "Summer T-Shirt"
                    },
                    {
                      "product_id": "2b11ea50-7f33-41bd-8cc8-336e10e6fdae",
                      "product_price": 350000,
                      "product_quantity": 1,
                      "product_name": "Áo hoddy"
                    }
                  ]
      responses:
        "200":
          description: Successfully calculated discount amount
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get amount by discount successfully"
                  data:
                    type: object
                    properties:
                      totalOrder:
                        type: number
                        example: 748000
                        description: The total value of the order before discount
                      discount:
                        type: number
                        example: 149600
                        description: The amount of discount applied
                      totalPrice:
                        type: number
                        example: 598400
                        description: The final price after discount
        "400":
          description: Invalid input or discount code not found/inactive
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  errorName:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Discount code not found or inactive"
        "401":
          description: Unauthorized
  /v1/api/discounts/restore:
    post:
      summary: Restore a deactivated discount code
      description: Reactivate a previously deactivated discount code
      tags:
        - Discount
      # security:
      #   - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shopId
                - codeId
              properties:
                shopId:
                  type: string
                  example: "984c06d4-e035-4308-9014-2eabaa78faf0"
                  description: The ID of the shop that owns the discount code
                codeId:
                  type: string
                  example: "72e134b2-a5c7-48f1-9bb5-53e3f8231294"
                  description: The ID of the discount code to restore
      responses:
        "201":
          description: Discount code restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Restore discount code successfully"
                  data:
                    $ref: "#/components/schemas/DiscountDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  errorName:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Discount code doesn't exist or is already active"
        "401":
          description: Unauthorized
  /v1/api/discounts/cancel:
    post:
      summary: Cancel (deactivate) a discount code
      description: Mark a discount code as inactive
      tags:
        - Discount
      # security:
      #   - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shopId
                - codeId
              properties:
                shopId:
                  type: string
                  example: "984c06d4-e035-4308-9014-2eabaa78faf0"
                  description: The ID of the shop that owns the discount code
                codeId:
                  type: string
                  example: "72e134b2-a5c7-48f1-9bb5-53e3f8231294"
                  description: The ID of the discount code to cancel
      responses:
        "201":
          description: Discount code cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cancel discount code successfully"
                  data:
                    $ref: "#/components/schemas/DiscountDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  errorName:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Discount code doesn't exist or already deleted"
        "401":
          description: Unauthorized
  /v1/api/discounts/use-discount:
    post:
      summary: Record usage of a discount code
      description: Track when a user applies a discount code to an order
      tags:
        - Discount
      # security:
      #   - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shopId
                - codeId
                - userId
              properties:
                shopId:
                  type: string
                  example: "984c06d4-e035-4308-9014-2eabaa78faf0"
                  description: The ID of the shop that owns the discount code
                codeId:
                  type: string
                  example: "c92f7acf-9cf8-46da-b869-76edd396a1cc"
                  description: The ID of the discount code being used
                userId:
                  type: string
                  example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
                  description: The ID of the user applying the discount code
      responses:
        "201":
          description: Discount code usage recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Using discount code successfully"
                  data:
                    $ref: "#/components/schemas/DiscountDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 400
                  errorName:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Discount code doesn't exist or is inactive"
        "401":
          description: Unauthorized

  # CART
  /v1/api/cart/{userId}:
    get:
      summary: Get cart by user ID
      description: Get the cart for a specific user by path parameter
      tags:
        - Cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
          description: The ID of the user to get cart for
      responses:
        "200":
          description: Successfully retrieved user cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get user cart successfully"
                  data:
                    $ref: "#/components/schemas/CartDto"
        "400":
          description: Bad Request
        "404":
          description: Cart not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    example: 404
                  errorName:
                    type: string
                    example: "Not Found"
                  message:
                    type: string
                    example: "User cart not found"
  /v1/api/cart:
    post:
      summary: Create user cart
      description: Create a new cart for a specific user
      tags:
        - Cart
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCartDto"
            example:
              cart_userId: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
              cart_products: [
                {
                  "product_thumb": "hello",
                  "product_id": "9f5dde85-5830-417d-93e7-f279249d6d49",
                  "product_price": 55555,
                  "product_quantity": 2,
                  "product_name": "Áo hoddy 2"
                }
              ]
      responses:
        "201":
          description: Cart created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Create user cart successfully"
                  data:
                    $ref: "#/components/schemas/CartDto"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
    get:
      summary: Get user cart
      description: Get the cart for a specific user
      tags:
        - Cart
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
          example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
          description: The ID of the user to get cart for
      responses:
        "200":
          description: Successfully retrieved user cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Get user cart successfully"
                  data:
                    $ref: "#/components/schemas/CartDto"
        "400":
          description: Bad Request
        "404":
          description: Cart not found
    put:
      summary: Update user cart
      description: Update the cart for a specific user
      tags:
        - Cart
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - cartId
                - cart_products
              properties:
                userId:
                  type: string
                  example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
                  description: The ID of the user who owns the cart
                cartId:
                  type: string
                  example: "85873208-f3a3-44f3-a2a9-44d676b8cbac"
                  description: The ID of the cart to update
                cart_products:
                  type: array
                  items:
                    $ref: "#/components/schemas/CartProductDto"
                  description: Updated array of products in the cart
            example:
              cartId: "093ac4bc-cf7b-4ba4-b4cb-a2337f366876"
              cart_products: [
                {
                  "product_id": "9f5dde85-5830-417d-93e7-f279249d6d49",
                  "product_thumb": "product_thumb",
                  "product_quantity": 2,
                  "product_name": "Áo hoddy 2",
                  "product_price": 55555
                }
              ]
      responses:
        "200":
          description: Cart updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Update user cart successfully"
                  data:
                    $ref: "#/components/schemas/CartDto"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "404":
          description: Cart not found
    delete:
      summary: Delete user cart
      description: Delete the cart for a specific user
      tags:
        - Cart
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - cartId
              properties:
                userId:
                  type: string
                  example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
                  description: The ID of the user who owns the cart
                cartId:
                  type: string
                  example: "96611c1e-8e77-4517-b3c7-e443df591ec3"
                  description: The ID of the cart to delete
      responses:
        "200":
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Delete cart successfully"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Cart not found
  /v1/api/cart/add:
    post:
      summary: Add product to cart
      description: Add a product to the user's cart
      tags:
        - Cart
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - product
              properties:
                userId:
                  type: string
                  example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
                  description: The ID of the user who owns the cart
                product:
                  $ref: "#/components/schemas/CartProductDto"
      responses:
        "200":
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Add product to cart successfully"
                  data:
                    $ref: "#/components/schemas/CartDto"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "404":
          description: Cart not found
  /v1/api/cart/item:
    delete:
      summary: Delete cart item
      description: Remove a specific product from the user's cart
      tags:
        - Cart
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - cartId
                - productId
              properties:
                userId:
                  type: string
                  example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
                  description: The ID of the user who owns the cart
                cartId:
                  type: string
                  example: "85873208-f3a3-44f3-a2a9-44d676b8cbac"
                  description: The ID of the cart
                productId:
                  type: string
                  example: "2b11ea50-7f33-41bd-8cc8-336e10e6fdae"
                  description: The ID of the product to remove from cart
      responses:
        "200":
          description: Cart item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Delete cart item successfully"
                  data:
                    $ref: "#/components/schemas/CartDto"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Cart or product not found


components:
  # schema: define data models that reuse in many endpoint
  schemas:
    # AUTHENTICATION
    LoginRequestDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: trong@gmail.com
        password:
          type: string
          example: 123
    LoginSuccessDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: aa2158c7-5bd1-477b-8606-7e96ea09e334
        role:
          $ref: "#/components/schemas/Role"
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MDUwNjM0MX0.Mgl-FANwtPMGhO3_HeOeoBFn2PoEYfSYsC4ECFgl0TE
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MzA5NDc0MX0.GWRNcc0jLR9KN97nH36W6gFqDRAV4PNycD_w8jcezXg
    SignupRequestDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Hoàng Gia Trọng
        email:
          type: string
          example: trong@gmail.com
        password:
          type: string
          example: 123
    SignupSuccessDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: aa2158c7-5bd1-477b-8606-7e96ea09e334
        name:
          type: string
          example: Hoàng Gia Trọng
        email:
          type: string
          example: trong@gmail.com
        role:
          $ref: "#/components/schemas/Role"
    RefreshRequestDto:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MzA5NDc0MX0.GWRNcc0jLR9KN97nH36W6gFqDRAV4PNycD_w8jcezXg
    RefreshSuccessDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: aa2158c7-5bd1-477b-8606-7e96ea09e334
        role:
          type: array
          items:
            type: string
          example: ["USER"]
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MDUwNjM0MX0.Mgl-FANwtPMGhO3_HeOeoBFn2PoEYfSYsC4ECFgl0TE
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MzA5NDc0MX0.GWRNcc0jLR9KN97nH36W6gFqDRAV4PNycD_w8jcezXg

    # PRODUCT
    ProductDto:
      type: object
      properties:
        _id:
          type: string
        product_name:
          type: string
        product_thumbnail:
          type: string
        product_description:
          type: string
        product_price:
          type: number
        product_quantity:
          type: number
        product_type:
          type: string
        product_shop:
          type: string
        product_attribute:
          type: object
        isPublished:
          type: boolean
        isDraft:
          type: boolean
    # Add this schema for creating products
    CreateProductDto:
      type: object
      required:
        - product_name
        - product_thumbnail
        - product_description
        - product_price
        - product_quantity
        - product_type
        - product_shop
        - product_attribute
      properties:
        product_name:
          type: string
          example: "Summer T-Shirt"
        product_thumbnail:
          type: string
          example: "https://example.com/images/tshirt.jpg"
        product_description:
          type: string
          example: "Comfortable cotton t-shirt for summer"
        product_price:
          type: number
          example: 199000
        product_quantity:
          type: number
          example: 100
        product_type:
          type: string
          enum:
            - Clothing
            - Electronic
            - Furniture
          example: "Clothing"
        product_shop:
          type: string
          example: "984c06d4-e035-4308-9014-2eabaa78faf0"
        product_attribute:
          type: object
          example:
            brand: "Fashion Brand"
            size: "M"
            material: "Cotton"
        product_ratingAverage:
          type: number
          example: 0
    DeleteProductDto:
      type: object
      properties:
        _id:
          type: string
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
        product_name:
          type: string
        product_thumbnail:
          type: string
        product_description:
          type: string
        product_price:
          type: number
        product_quantity:
          type: number
        product_type:
          type: string
        product_shop:
          type: string
        product_attribute:
          type: object
        isPublished:
          type: boolean
        isDraft:
          type: boolean
        deleteTimestamp:
          type: string
          format: date-time
          example: "2025-03-15T10:30:00Z"
    UpdateProductDto:
      type: object
      properties:
        product_name:
          type: string
        product_thumbnail:
          type: string
        product_description:
          type: string
        product_price:
          type: number
        product_quantity:
          type: number
        product_type:
          type: string
          enum:
            - Clothing
            - Electronic
            - Furniture
        product_attribute:
          type: object
          properties:
            brand:
              type: string
              example: "update-product"
            size:
              type: string
              example: "update-product"
            material:
              type: string
              example: "update-product"
        product_ratingAverage:
          type: number
        product_variants:
          type: array
          items:
            type: object
        isDraft:
          type: boolean
        isPublished:
          type: boolean
    PubProductDto:
      type: object
      required:
        - product_shop
        - product_id
      properties:
        product_shop:
          type: string
          description: Shop ID of the product owner
          example: 984c06d4-e035-4308-9014-2eabaa78faf0
        product_id:
          type: string
          description: ID of the product to be published
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
    UnPubProductDto:
      type: object
      required:
        - product_shop
        - product_id
      properties:
        product_shop:
          type: string
          description: Shop ID of the product owner
          example: 984c06d4-e035-4308-9014-2eabaa78faf0

        product_id:
          type: string
          description: ID of the product to be unpublished
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac

    # DISCOUNT
    DiscountProductDto:
      type: object
      required:
        - product_id
        - product_price
        - product_quantity
        - product_name
      properties:
        product_id:
          type: string
          example: "8943b5c7-35e2-4e5f-9654-1abcd54f7890"
        product_price:
          type: number
          example: 250000
        product_quantity:
          type: number
          example: 50
        product_name:
          type: string
          example: "Premium T-shirt"
    CreateDiscountDto:
      type: object
      required:
        - discount_name
        - discount_type
        - discount_value
        - discount_code
        - discount_start_date
        - discount_end_date
        - discount_max_uses
        - discount_max_user_per_user
        - discount_min_order_value
        - discount_shopId
        - discount_applies_to
      properties:
        discount_name:
          type: string
          example: "Summer Sale"
          minLength: 3
        discount_description:
          type: string
          example: "20% off for all products in summer"
        discount_type:
          type: string
          enum: ["PERCENTAGE", "FIX_AMOUNT"]
          example: "PERCENTAGE"
        discount_value:
          type: number
          example: 20
          minimum: 1
        discount_code:
          type: string
          example: "SUMMER20"
          pattern: "^[A-Z0-9]+$"
        discount_start_date:
          type: string
          format: date-time
          example: "2025-06-01T00:00:00Z"
        discount_end_date:
          type: string
          format: date-time
          example: "2025-08-31T23:59:59Z"
        discount_max_uses:
          type: integer
          example: 1000
          minimum: 1
        discount_max_user_per_user:
          type: integer
          example: 1
          minimum: 1
        discount_min_order_value:
          type: number
          example: 100000
          minimum: 0
        discount_shopId:
          type: string
          example: "984c06d4-e035-4308-9014-2eabaa78faf0"
        discount_is_active:
          type: boolean
          default: true
        discount_applies_to:
          type: string
          enum: ["ALL", "SPECIFIC"]
          example: "ALL"
        discount_products_ids:
          type: array
          items:
            $ref: "#/components/schemas/DiscountProductDto"
    DiscountDto:
      type: object
      properties:
        _id:
          type: string
          example: "72e134b2-a5c7-48f1-9bb5-53e3f8231294"
        discount_name:
          type: string
          example: "Summer Sale"
        discount_description:
          type: string
          example: "20% off for all products in summer"
        discount_type:
          type: string
          enum: ["PERCENTAGE", "FIX_AMOUNT"]
          example: "PERCENTAGE"
        discount_value:
          type: number
          example: 20
        discount_code:
          type: string
          example: "SUMMER20"
        discount_start_date:
          type: string
          format: date-time
          example: "2025-06-01T00:00:00Z"
        discount_end_date:
          type: string
          format: date-time
          example: "2025-08-31T23:59:59Z"
        discount_max_uses:
          type: integer
          example: 1000
        discount_uses_count:
          type: integer
          example: 0
        discount_users_used:
          type: array
          items:
            type: string
          example: []
        discount_max_user_per_user:
          type: integer
          example: 1
        discount_min_order_value:
          type: number
          example: 100000
        discount_shopId:
          type: string
          example: "984c06d4-e035-4308-9014-2eabaa78faf0"
        discount_is_active:
          type: boolean
          example: true
        discount_applies_to:
          type: string
          enum: ["ALL", "SPECIFIC"]
          example: "ALL"
        discount_products_ids:
          type: array
          items:
            $ref: "#/components/schemas/DiscountProductDto"
          example: []
        createTimestamp:
          type: string
          format: date-time
          example: "2025-03-15T10:30:00Z"
        updateTimestamp:
          type: string
          format: date-time
          example: "2025-03-15T10:30:00Z"

    # CART
    CreateCartDto:
      type: object
      required:
        - cart_userId
        - cart_products
      properties:
        cart_userId:
          type: string
          format: uuid
          example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
          description: ID of the user who owns the cart
        cart_products:
          type: array
          items:
            $ref: "#/components/schemas/CartProductDto"
          description: Array of products in the cart
    CartProductDto:
      type: object
      required:
        - product_id
        - product_quantity
        - product_name
        - product_price
      properties:
        product_id:
          type: string
          format: uuid
          example: "9f5dde85-5830-417d-93e7-f279249d6d49"
        product_thumb:
          type: string
          format: uuid
          example: "product_thumb"
        product_quantity:
          type: integer
          minimum: 1
          example: 2
        product_name:
          type: string
          example: "Áo hoddy 2"
        product_price:
          type: number
          example: 55555
    CartDto:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "b9a5f1d7-8e23-4d1c-9b5f-a87654321abc"
        cart_userId:
          type: string
          format: uuid
          example: "aa2158c7-5bd1-477b-8606-7e96ea09e334"
        cart_products:
          type: array
          items:
            $ref: "#/components/schemas/CartProductDto"
        cart_count_product:
          type: integer
          example: 2
        createTimestamp:
          type: string
          format: date-time
          example: "2025-04-15T14:30:00Z"
        updateTimestamp:
          type: string
          format: date-time
          example: "2025-04-15T15:45:00Z"

    #ROLE
    Role:
      type: string
      enum:
        - SHOP
        - WRITER
        - EDITOR
        - ADMIN
  # parameters: it defines parameter that reuse in endpoints
  parameters:
    page:
      name: page
      in: query
      description: The current page number
      required: false
      schema:
        type: integer
        default: 1
    pageSize:
      name: pageSize
      in: query
      description: The number of items per page
      required: false
      schema:
        type: integer
        default: 10
    sorting:
      name: sorting
      in: query
      description: The sorting for the query. The syntax is `{field}:{order}`,
      required: false
      schema:
        type: array
        items:
          type: string
          default: createTimestamp:desc
    fromCreateTimestamp:
      name: fromCreateTimestamp
      in: query
      description: Every items created after this timestamp will be returned
      example: 2025-01-01T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    toCreateTimestamp:
      name: toCreateTimestamp
      in: query
      description: Every items created before this timestamp will be returned
      example: 2025-12-31T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    fromDeleteTimestamp:
      name: fromDeleteTimestamp
      in: query
      description: Every items deleted after this timestamp will be returned
      example: 2025-01-01T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    toDeleteTimestamp:
      name: toDeleteTimestamp
      in: query
      description: Every items deleted before this timestamp will be returned
      example: 2025-12-31T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    ClientIdHeader:
      name: x-client-id
      in: header
      required: false
      schema:
        type: string
      example: 984c06d4-e035-4308-9014-2eabaa78faf0
      description: Client ID header - ShopId
    AuthorizationHeader:
      name: authorization
      in: header
      required: false
      schema:
        type: string
      description: Authorization header - AccessToken
  # security with jwt
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
