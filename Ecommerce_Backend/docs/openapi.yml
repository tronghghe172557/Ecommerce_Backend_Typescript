openapi: 3.0.0
info:
  title: E-commerce Shop API
  version: 1.0.0
  description: |-
    This is API documentation for E-commerce Shop. It is individual project for learning about Service Side with NodeJS, ExpressJS, MongoDB.

    Author: Hoàng Gia Trọng

    The source code is available at [Github-Ecommerce_Backend_Typescript](https://github.com/tronghghe172557/Ecommerce_Backend_Typescript)
  contact:
    name: Hoàng Gia Trọng
    email: hoanggiatrang01@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3052/
tags:
  - name: auth
    description: Authentication & Authorization
  - name: Product
    description: Production
paths:
  # AUTHENTICATION
  /v1/api/auth/login:
    post:
      summary: Login to the system
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        "201":
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/LoginSuccessDto"
        "400":
          description: Username or password is missing/invalid
        "401":
          description: Username or password is incorrect
  /v1/api/auth/signUp:
    post:
      summary: Sign up for a new account
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequestDto"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/SignupSuccessDto"
        "400":
          description: Invalid input data
  /v1/api/auth/logout:
    get:
      summary: Logout from the system
      tags:
        - auth
      security:
        - JWT: []
      responses:
        "200":
          description: Logout successfully
        "401":
          description: Unauthorized
  /v1/api/auth/handle-refreshToken:
    post:
      summary: Handle refresh token
      tags:
        - auth
      security:
        - JWT: []
      parameters:
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/RefreshRequestDto"
      responses:
        "200":
          description: Refresh token handled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshSuccessDto"
        "400":
          description: Invalid refresh token
        "401":
          description: Unauthorized

  # PRODUCT
  /v1/api/product/{productId}:
    put:
      summary: Update an existing product
      tags:
        - Product
      security:
        - JWT: []
      parameters:
        - name: productId
          in: path
          required: true
          example: 85873208-f3a3-44f3-a2a9-44d676b8cbac
          schema:
            type: string
          description: The ID of the product to update
        - $ref: "#/components/parameters/ClientIdHeader"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductDto"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UpdateProductDto"
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized
        "404":
          description: Product not found
components:
  # schema: define data models that reuse in many endpoint
  schemas:
    # AUTHENTICATION
    LoginRequestDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: trong@gmail.com
        password:
          type: string
          example: 123
    LoginSuccessDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: aa2158c7-5bd1-477b-8606-7e96ea09e334
        role:
          $ref: "#/components/schemas/Role"
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJyb2xlIjoiQURNSU4iLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MDUwNjM0MX0.Mgl-FANwtPMGhO3_HeOeoBFn2PoEYfSYsC4ECFgl0TE
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MzA5NDc0MX0.GWRNcc0jLR9KN97nH36W6gFqDRAV4PNycD_w8jcezXg
    SignupRequestDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: Hoàng Gia Trọng
        email:
          type: string
          example: trong@gmail.com
        password:
          type: string
          example: 123
    SignupSuccessDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: aa2158c7-5bd1-477b-8606-7e96ea09e334
        name:
          type: string
          example: Hoàng Gia Trọng
        email:
          type: string
          example: trong@gmail.com
        role:
          $ref: "#/components/schemas/Role"
    RefreshRequestDto:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MzA5NDc0MX0.GWRNcc0jLR9KN97nH36W6gFqDRAV4PNycD_w8jcezXg
    RefreshSuccessDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: aa2158c7-5bd1-477b-8606-7e96ea09e334
        role:
          type: array
          items:
            type: string
          example: ["USER"]
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MDUwNjM0MX0.Mgl-FANwtPMGhO3_HeOeoBFn2PoEYfSYsC4ECFgl0TE
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlYzczOWJkNi02ZGNlLTQzYWYtOTFkYi1iNzg2YmQwMWVkNzkiLCJpYXQiOjE3NDA1MDI3NDEsImV4cCI6MTc0MzA5NDc0MX0.GWRNcc0jLR9KN97nH36W6gFqDRAV4PNycD_w8jcezXg

    # PRODUCT
    UpdateProductDto:
      type: object
      properties:
        product_name:
          type: string
        product_thumbnail:
          type: string
        product_description:
          type: string
        product_price:
          type: number
        product_quantity:
          type: number
        product_type:
          type: string
          enum:
            - Clothing
            - Electronic
            - Furniture
        product_attribute:
          type: object
          properties:
            brand:
              type: string
              example: "update-product"
            size:
              type: string
              example: "update-product"
            material:
              type: string
              example: "update-product"
        product_ratingAverage:
          type: number
        product_variants:
          type: array
          items:
            type: object
        isDraft:
          type: boolean
        isPublished:
          type: boolean
    #ROLE
    Role:
      type: string
      enum:
        - SHOP
        - WRITER
        - EDITOR
        - ADMIN
  # parameters: it defines parameter that reuse in endpoints
  parameters:
    page:
      name: page
      in: query
      description: The current page number
      required: false
      schema:
        type: integer
        default: 1
    pageSize:
      name: pageSize
      in: query
      description: The number of items per page
      required: false
      schema:
        type: integer
        default: 10
    sorting:
      name: sorting
      in: query
      description: The sorting for the query. The syntax is `{field}:{order}`,
      required: false
      schema:
        type: array
        items:
          type: string
          default: createTimestamp:desc
    fromCreateTimestamp:
      name: fromCreateTimestamp
      in: query
      description: Every items created after this timestamp will be returned
      example: 2025-01-01T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    toCreateTimestamp:
      name: toCreateTimestamp
      in: query
      description: Every items created before this timestamp will be returned
      example: 2025-12-31T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    fromDeleteTimestamp:
      name: fromDeleteTimestamp
      in: query
      description: Every items deleted after this timestamp will be returned
      example: 2025-01-01T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    toDeleteTimestamp:
      name: toDeleteTimestamp
      in: query
      description: Every items deleted before this timestamp will be returned
      example: 2025-12-31T00:00:00Z
      required: false
      schema:
        type: string
        format: date-time
    ClientIdHeader:
      name: x-client-id
      in: header
      required: false
      schema:
        type: string
      example: 984c06d4-e035-4308-9014-2eabaa78faf0
      description: Client ID header - ShopId
    AuthorizationHeader:
      name: authorization
      in: header
      required: false
      schema:
        type: string
      description: Authorization header - AccessToken
  # security with jwt
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
